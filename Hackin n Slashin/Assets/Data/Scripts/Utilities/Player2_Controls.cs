//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Data/Scripts/Utilities/Player2_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player2_Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player2_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player2_Controls"",
    ""maps"": [
        {
            ""name"": ""Player2_Movement"",
            ""id"": ""66539726-28bb-4e45-9467-04fffcd3746c"",
            ""actions"": [
                {
                    ""name"": ""Movement_P2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1e3931c9-7407-4b33-8ce8-9f3262d608a4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""314276bf-d6b9-4050-b16d-3131a17ecbf0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""7be51b53-342a-4843-90d6-a8ade13c241f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""4fe87948-42aa-47d6-8d42-d0f7f1ab3dc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Joystick"",
                    ""id"": ""9da7fadd-b5b9-4d50-b913-3506161e71bd"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_P2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4e2a3417-5329-49a0-b525-ef200f4bc88c"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_P2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""de549f52-2e3e-4b6f-9879-b2107c510cc1"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_P2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f4762965-56a7-4565-acb5-0054768a3210"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_P2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a3f94139-92cb-403d-9648-c65990b23a68"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_P2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b9effc02-af0c-4fd3-81c8-6ce1e920f2b4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc6e0355-8791-4c43-8428-beffc7dc1adc"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88d402b3-9f52-4f39-bfff-9b6f08445d1d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player2_Movement
        m_Player2_Movement = asset.FindActionMap("Player2_Movement", throwIfNotFound: true);
        m_Player2_Movement_Movement_P2 = m_Player2_Movement.FindAction("Movement_P2", throwIfNotFound: true);
        m_Player2_Movement_Jump = m_Player2_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Player2_Movement_Dash = m_Player2_Movement.FindAction("Dash", throwIfNotFound: true);
        m_Player2_Movement_Attack = m_Player2_Movement.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player2_Movement
    private readonly InputActionMap m_Player2_Movement;
    private List<IPlayer2_MovementActions> m_Player2_MovementActionsCallbackInterfaces = new List<IPlayer2_MovementActions>();
    private readonly InputAction m_Player2_Movement_Movement_P2;
    private readonly InputAction m_Player2_Movement_Jump;
    private readonly InputAction m_Player2_Movement_Dash;
    private readonly InputAction m_Player2_Movement_Attack;
    public struct Player2_MovementActions
    {
        private @Player2_Controls m_Wrapper;
        public Player2_MovementActions(@Player2_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement_P2 => m_Wrapper.m_Player2_Movement_Movement_P2;
        public InputAction @Jump => m_Wrapper.m_Player2_Movement_Jump;
        public InputAction @Dash => m_Wrapper.m_Player2_Movement_Dash;
        public InputAction @Attack => m_Wrapper.m_Player2_Movement_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Player2_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2_MovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2_MovementActions instance)
        {
            if (instance == null || m_Wrapper.m_Player2_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2_MovementActionsCallbackInterfaces.Add(instance);
            @Movement_P2.started += instance.OnMovement_P2;
            @Movement_P2.performed += instance.OnMovement_P2;
            @Movement_P2.canceled += instance.OnMovement_P2;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IPlayer2_MovementActions instance)
        {
            @Movement_P2.started -= instance.OnMovement_P2;
            @Movement_P2.performed -= instance.OnMovement_P2;
            @Movement_P2.canceled -= instance.OnMovement_P2;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IPlayer2_MovementActions instance)
        {
            if (m_Wrapper.m_Player2_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2_MovementActions instance)
        {
            foreach (var item in m_Wrapper.m_Player2_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2_MovementActions @Player2_Movement => new Player2_MovementActions(this);
    public interface IPlayer2_MovementActions
    {
        void OnMovement_P2(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
